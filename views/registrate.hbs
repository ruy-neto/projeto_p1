{{> header}}

<div id="app">
    <div class="container-fluid">
        <div class="row">
            <div class="col d-flex justify-content-center">
                    <video ref="video" class="w-50 h-auto" autoplay playsinline muted></video>
                    <canvas ref="canvas" class="w-100 h-auto" style="display: none;"></canvas>
            </div>
        </div>
    </div>


    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" v-if="showModal">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Informações do Estudante</h5>
      </div>
      <div class="modal-body">
        <p>Nome do Estudante:</p>
        <p v-text="studentName"></p>
        <p>Nome do Responsável:</p>
        <p v-text="parentName"></p>
      </div>
      <div class="modal-footer d-flex flex-column">
        <button type="button" class="btn btn-primary w-100 mb-2" @click="registerCheckIN()">Registrar Check-In</button>
        <button type="button" class="btn btn-primary w-100" @click="registerCheckout()">Registrar Checkout</button>
        <button type="button" class="btn btn-secondary w-100 mb-2" data-dismiss="modal" @click="killTheModal()">Fechar</button>
      </div>
    </div>
  </div>
</div>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                message: 'Olá, Vue.js!',
                optionRank:1,
                active: 'active',
                standard:'nav-item',
                calledModal:false,
                studentName:"",
                parentName:"",
                studentid:"",
                guardid:{{pageInfo.guardid}},
                showModal:false
            }
        },
        mounted() {
            const video = this.$refs.video;
            const canvas = this.$refs.canvas;
            const context = canvas.getContext('2d');

            navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })
            .then((stream) => {
                video.srcObject = stream;
                video.play();
                this.tick(); 
            })
            .catch((error) => {
                console.error('Erro ao acessar a câmera:', error);
                alert('Error accessing media devices: ' + error.message);
            });
        },
        methods: {
            registerCheckIN(){
                const params = {"id_student":this.studentid,
                        "id_guard": this.guardid,
                        "ischeckin": 1};
                axios.post("/qrcode",params).then(resposta => {
                    this.killTheModal();
                    this.showModal = false;
                    console.log('Resposta:', resposta.data);
                    window.location.href = "registrate/success";
                })
                .catch(erro => {
                    console.error('Erro:', erro);
                });
            },
            registerCheckout(){
                const params = {"id_student":this.studentid,
                        "id_guard": this.guardid,
                        "ischeckin": 0};
                axios.post("/qrcode",params).then(resposta => {
                    this.killTheModal();
                    this.showModal = false;
                    console.log('Resposta:', resposta.data);
                    window.location.href = "registrate/success";
                })
                .catch(erro => {
                    console.error('Erro:', erro);
                });
            },
            killTheModal(){
                window.location.reload();
            },
            tick() {
                const video = this.$refs.video;
                const canvas = this.$refs.canvas;
                const context = canvas.getContext('2d');
                if (video.readyState === video.HAVE_ENOUGH_DATA) {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);
                    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, imageData.width, imageData.height); 
                    
                    if (!this.calledModal) {
                        if (code != null) {
                            this.qrcode = code;
                            const url = "/qrcode/"+code.data;
                            this.calledModal = true;
                            axios.get(url).then(response => {
                                this.showModal = true;
                                this.studentName = response.data.studentName;
                                this.parentName = response.data.parentName;
                                this.studentid = response.data.studentId;
                                var myModal = new bootstrap.Modal(document.getElementById('exampleModal'));
                                myModal.show();
                                
                            })
                            .catch(error => {
                                this.calledModal = false;
                            });
                        }           
                    }
                }
                requestAnimationFrame(() => this.tick()); // Chama a função tick() novamente no próximo quadro de vídeo
            },
            updateTab(newValue) {
            // Atualiza o valor da variável com o valor passado como argumento
                this.selectedTab = newValue;
            },
            showList(){
                return this.optionRank == 1;
            },
            showCreate() {
                return this.optionRank == 0;
            }
        }
    });

    app.mount('#app');
</script>